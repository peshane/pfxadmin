#!/usr/bin/env python

from psql import launchQuery
from tools import printTabular, doesAddressExist, showMess, ask
import datetime
from passlib import pwd
from random import randint
from passlib.hash import md5_crypt


class Mailbox(object):
    def __init__(self, cur, domain):
        self.cur = cur
        self.domain = domain

    def show(self, domain=None):
        query = "select mailbox.*, alias.comment from mailbox " + \
                "inner join alias on mailbox.username = alias.address " + \
                "where mailbox.domain=(%s) order by username"
        domain = (domain, )
        rows = launchQuery(self.cur, query, domain)
        headers = ["username", "name", "quota", "created",
                   "modified", "active", "comment"]
        data = []
        for row in rows:
            m_username = row[0].split('@')[0]
            m_name = row[2]
            m_quota = row[4]
            m_created = datetime.datetime.strftime(row[5], "%x %X")
            m_modified = datetime.datetime.strftime(row[6], "%x %X")
            m_active = row[7]
            m_comment = row[10]
            data.append([m_username, m_name, m_quota,
                         m_created, m_modified, m_active,
                         m_comment])
        printTabular(headers, data)

    def pre_add(self, domain=None, address=None):
        """add a new mailbox"""
        if doesAddressExist(address + "@" + domain, cur=self.cur):
            showMess("{}@{} already exist".format(address, domain), "warn")
            return False
        password = ask("password (empty for autogenerated): ", "required")
        password = password.replace(" ", "")  # remove space
        if len(password) == 0:
            password = pwd.genword(charset="ascii_72", length=randint(8, 12))
        elif not password.isprintable():
            showMess("Only printable characters are allowed", "warn")
            return False
        name = ask("Full Name: ", "optional")
        comment = ask("comment: ", "optional")
        if len(comment) == 0:
            comment = None
        headers = ["mailbox", "password", "full name", "comment"]
        data = [[address + '@' + domain, password, name, comment]]
        printTabular(headers, data)
        confirm = ask("Do you confirm ? [y/N] ", "required")
        if confirm == "y" or confirm == "Y":
            self.add(domain, address, password, name, comment)
        else:
            showMess("you don't want this")
            return True

    def add(self, domain=None, address=None, password=None,
            name='', comment=None):
        """execute the query for adding new mailbox"""
        username = "{}@{}".format(address, domain)
        maildir = "{}/".format(username)
        # active = True
        local_part = address
        password = md5_crypt.hash(password)
        query = """insert into mailbox
                (username, password, name, maildir, domain, local_part)
                values (%s, %s, %s, %s, %s, %s)"""
        data = (username, password, name, maildir, domain, local_part)
        launchQuery(self.cur, query, data, commit=True)
        query = """insert into alias
                (address, goto, domain, comment)
                values (%s, %s, %s, %s)"""
        data = (username, username, domain, comment)
        launchQuery(self.cur, query, data, commit=True)
        showMess('mailbox {} is now available'.format(username))

    def remove(self, domain=None, address=None):
        """remove a mailbox"""
        username = '{}@{}'.format(address, domain)
        if not doesAddressExist(username, cur=self.cur):
            showMess("mailbox {} does not exist".format(username), "warn")
            return False
        confirm = ask("Do you really want to remove {}? [y/N] "
                      .format(username), "required")
        if confirm == "y" or confirm == "Y":
            query = "delete from mailbox where username=(%s)"
            data = (username, )
            launchQuery(self.cur, query, data, commit=True)
            query = "delete from alias where address=(%s)"
            launchQuery(self.cur, query, data, commit=True)
            showMess("mailbox {} has been removed".format(username))
            showMess("don't forget to remove the vmail directory")
        else:
            showMess("{} deletion canceled".format(username))
            return True

    def pre_update(self, domain=None, args=None):
        if args[2] == "comment":
            try:
                address = args[1]
            except:
                showMess("you have to provide a mailbox", "warn")
                return False
            try:
                if len(args) > 2:
                    new_comment = " ".join(args[3:])
                else:
                    new_comment = None
            except:
                showMess("", "error")
            else:
                if len(new_comment) > 50:  # abritrary limit
                    showMess("{:n} characters is really too much, limit is 50"
                             .format(len(new_comment)), "warn")
                    return False
                self.update(domain=domain, address=address,
                            comment=True, new_comment=new_comment)
        elif args[2] == "name":
            try:
                address = args[1]
            except:
                showMess("you have to provide a mailbox", "warn")
                return False
            try:
                if len(args) > 2:
                    new_name = " ".join(args[3:])
                else:
                    new_name = ''
            except:
                showMess("", "error")
            else:
                if len(new_name) > 20:  # abritrary limit
                    showMess("{:n} characters is really too much, limit is 20"
                             .format(len(new_name)), "warn")
                    return False
                self.update(domain=domain, address=address,
                            name=True, new_name=new_name)
        elif args[2] == 'password':
            try:
                address = args[1]
            except:
                showMess("you have to provide a mailbox", "warn")
                return False
            new_password = ask("password (empty for autogenerated): ",
                               "required")
            new_password = new_password.replace(" ", "")  # remove space
            if len(new_password) == 0:
                new_password = pwd.genword(charset="ascii_72",
                                           length=randint(8, 12))
            elif not new_password.isprintable():
                showMess("Only printable characters are allowed", "warn")
                return False
            showMess("the new password for {} will be: {}"
                     .format(address, new_password))
            confirm = ask("Do you confirm ? [y/N] ", "required")
            if confirm == "y" or confirm == "Y":
                self.update(domain, address,
                            password=True, new_password=new_password)
            else:
                showMess("you don't want this")
                return True

    def update(self, domain=None, address=None,
               comment=False, name=False,
               password=False, **kargs):
        """updating comment or full name for a mailbox"""
        address = "{}@{}".format(address, domain)
        # check if alias exist
        if not doesAddressExist(address, "alias", cur=self.cur):
            showMess("mailbox {} does not exist".format(address), "warn")
            return False
        if comment:
            query = """update alias set (comment, modified)=(%s,%s)
                    where address=(%s)"""
            now = datetime.datetime.now()
            data = (kargs["new_comment"], now, address)
            try:
                launchQuery(self.cur, query, data, commit=True)
                showMess("{}'s comment is updated".format(address))
            except Exception as msg:
                showMess("This problem occured:\n{}".format(msg), "error")
                return False
            return True
        elif name:
            new_name = kargs["new_name"]
            query = """update mailbox set (name, modified)=(%s, %s)
                    where username=(%s)"""
            now = datetime.datetime.now()
            data = (new_name, now, address)
            try:
                launchQuery(self.cur, query, data, commit=True)
                showMess("{}'s full name is updated".format(address))
            except Exception as msg:
                showMess("This problem occured:\n{}".format(msg), "error")
                return False
            else:
                return True
        elif password:
            new_pwd = md5_crypt.hash(kargs["new_password"])
            query = """update mailbox set (password, modified)=(%s, %s)
                    where username=(%s)"""
            now = datetime.datetime.now()
            data = (new_pwd, now, address)
            try:
                launchQuery(self.cur, query, data, commit=True)
                showMess("{}'s full name is updated".format(address))
            except Exception as msg:
                showMess("This problem occured:\n{}".format(msg), "error")
                return False
            else:
                return True
